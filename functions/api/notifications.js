function generateUUID() {
    return crypto.randomUUID();
}

function manageCORSForRequests() { 
    return {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
    };
}

async function authenticateRequest(request) {
    return true;
}

function validateNotification(notification) {
    return (notification && 
        ['alert', 'info', 'success'].includes(notification.type) &&
        notification.content?.text &&
        typeof notification.read === 'boolean'
    );
}

async function retrieveNotifsFromKVStore(env) {
    const notifications = await env.NOTIFICATIONS_KV.get('notifications', 'json');
    return notifications || [];
}

async function deleteAllAutoGeneratedNotifsFromKV(env) {
    await env.NOTIFICATIONS_KV.delete('notifications');
    return true;
}

export async function onRequest(context) {
    const { request, env } = context;

    // Manage CORS
    if (request.method === 'OPTIONS') {
        return new Response(null, {
            headers: manageCORSForRequests()
        });
    }

    const isAuthenticated = await authenticateRequest(request);
    if (!isAuthenticated) {
        return new Response('Unauthorized', { status: 401 });
    }

    try {
        switch (request.method) {
            case 'GET':
                const notifications = await retrieveNotifsFromKVStore(env);
                return new Response(JSON.stringify(notifications, null, 2), {
                    headers: {
                    'Content-Type': 'application/json',
                    ...manageCORSForRequests()
                    }
                });
    
            case 'POST':
                const body = await request.json();
                const notificationsToCreate = Array.isArray(body) ? body : [body];

                if (!notificationsToCreate.every(validateNotification)) {
                    return new Response('Invalid notification format', { status: 400 });
                }
                
                const existingNotifications = await env.NOTIFICATIONS_KV.get('notifications', 'json') || [];

                const processedNotifications = notificationsToCreate.map(notification => ({
                    id: generateUUID(),
                    type: notification.type,
                    content: {
                        text: notification.content.text
                    },
                    read: notification.read,
                    timestamp: Date.now()
                }));

                const updatedNotifications = [...existingNotifications, ...processedNotifications];
                await env.NOTIFICATIONS_KV.put('notifications', JSON.stringify(updatedNotifications));

                return new Response(JSON.stringify(processedNotifications, null, 2), {
                    headers: {
                        'Content-Type': 'application/json',
                        ...manageCORSForRequests()
                    }
                });
    
            case 'DELETE':
                await deleteAllAutoGeneratedNotifsFromKV(env);
                return new Response(JSON.stringify({
                    message: 'Notifications deleted successfully!'
                }), {
                    headers: {
                    'Content-Type': 'application/json',
                    ...manageCORSForRequests()
                    }
                });
    
            default:
                return new Response('Method not allowed', { status: 405 });
        }
    } catch (error) {
        console.error('Error processing request:', error);
        return new Response('Internal Server Error', { 
            status: 500,
            headers: manageCORSForRequests()
        });
    }
}